name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run'
        required: false
        type: boolean
        default: false

jobs:
  prepare_release:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Validate version format
      run: |
        if ! echo "${{ inputs.version }}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
          echo "Invalid version format: ${{ inputs.version }}"
          exit 1
        fi

    - name: Check if version exists
      run: |
        if git tag | grep -q "^v${{ inputs.version }}$"; then
          echo "Version v${{ inputs.version }} already exists"
          exit 1
        fi

    - name: Update Cargo.toml versions
      run: |
        # Update workspace version
        sed -i 's/^version = ".*"/version = "${{ inputs.version }}"/' Cargo.toml
        
        # Update individual crate versions
        find . -name "Cargo.toml" -not -path "./target/*" | while read -r file; do
          sed -i 's/^version = ".*"/version = "${{ inputs.version }}"/' "$file"
          # Update workspace dependencies
          sed -i 's/fluxencrypt = { version = ".*"/fluxencrypt = { version = "${{ inputs.version }}"/' "$file"
          sed -i 's/fluxencrypt-async = { version = ".*"/fluxencrypt-async = { version = "${{ inputs.version }}"/' "$file"
        done

    - name: Update CHANGELOG.md
      run: |
        # Create a new changelog entry
        DATE=$(date +%Y-%m-%d)
        sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [${{ inputs.version }}] - $DATE/" CHANGELOG.md

    - name: Run tests
      run: cargo test --all-features --workspace

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features --workspace -- -D warnings

    - name: Dry run cargo publish
      if: inputs.dry_run
      run: |
        cargo publish --dry-run -p fluxencrypt
        cargo publish --dry-run -p fluxencrypt-async  
        cargo publish --dry-run -p fluxencrypt-cli

    - name: Commit version changes
      if: "!inputs.dry_run"
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Release v${{ inputs.version }}"
        git push

    - name: Create and push tag
      if: "!inputs.dry_run"
      run: |
        git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}"
        git push origin "v${{ inputs.version }}"

  post_release:
    name: Post Release Tasks
    runs-on: ubuntu-latest
    needs: prepare_release
    if: "!inputs.dry_run"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create post-release commit
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Prepare for next development cycle
        sed -i '/## \[Unreleased\]/a\\n### Added\n- \n\n### Changed\n- \n\n### Fixed\n- ' CHANGELOG.md
        
        git add CHANGELOG.md
        git commit -m "Prepare for next development cycle after v${{ inputs.version }}"
        git push
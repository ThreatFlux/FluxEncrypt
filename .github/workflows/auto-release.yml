name: Auto Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract the latest version's changelog
          sed -n "/^## \[$(echo ${{ github.ref_name }} | sed 's/^v//')\]/,/^## \[/p" CHANGELOG.md | sed '$d' > RELEASE_CHANGELOG.md
        else
          echo "Release ${{ github.ref_name }}" > RELEASE_CHANGELOG.md
        fi

    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [[ "${{ contains(github.ref, '-') }}" == "true" ]]; then
          PRERELEASE="--prerelease"
        else
          PRERELEASE=""
        fi
        gh release create "${{ github.ref_name }}" \
          --title "Release ${{ github.ref_name }}" \
          --notes-file RELEASE_CHANGELOG.md \
          $PRERELEASE
        echo "upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} --jq '.upload_url')" >> $GITHUB_OUTPUT

  build_and_upload:
    name: Build and Upload
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: fluxencrypt-cli
            asset_name: fluxencrypt-linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: fluxencrypt-cli
            asset_name: fluxencrypt-linux-musl-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: fluxencrypt-cli.exe
            asset_name: fluxencrypt-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: fluxencrypt-cli
            asset_name: fluxencrypt-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: fluxencrypt-cli
            asset_name: fluxencrypt-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} -p fluxencrypt-cli

    - name: Strip binary (Unix only)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Compress binary
      run: |
        cd target/${{ matrix.target }}/release
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
        else
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        fi

    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ASSET_FILE="target/${{ matrix.target }}/release/${{ matrix.asset_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}"
        gh release upload "${{ github.ref_name }}" "$ASSET_FILE"

  publish_crates:
    name: Publish to crates.io
    needs: create_release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish fluxencrypt
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish -p fluxencrypt --token $CARGO_REGISTRY_TOKEN

    - name: Wait for crates.io to update
      run: sleep 30

    - name: Publish fluxencrypt-async
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish -p fluxencrypt-async --token $CARGO_REGISTRY_TOKEN

    - name: Wait for crates.io to update
      run: sleep 30

    - name: Publish fluxencrypt-cli
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish -p fluxencrypt-cli --token $CARGO_REGISTRY_TOKEN
name: Auto Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
        - prepatch
        - preminor
        - premajor
      prerelease_identifier:
        description: 'Prerelease identifier (alpha, beta, rc)'
        required: false
        default: 'alpha'
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Wait for CI to complete
  wait_for_ci:
    name: Wait for CI
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI checks
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'Test Suite'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

  # Determine version and create release
  version_and_release:
    name: Version Bump and Release
    needs: wait_for_ci
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-bump
        run: cargo install cargo-bump

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump
        id: version_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "bump_type=${{ inputs.version_bump }}" >> $GITHUB_OUTPUT
            echo "prerelease_id=${{ inputs.prerelease_identifier }}" >> $GITHUB_OUTPUT
          else
            # Auto-determine from commits
            if git log --format="%s" HEAD~1..HEAD | grep -E "^(feat!|fix!|BREAKING CHANGE)" > /dev/null; then
              echo "bump_type=major" >> $GITHUB_OUTPUT
            elif git log --format="%s" HEAD~1..HEAD | grep -E "^feat" > /dev/null; then
              echo "bump_type=minor" >> $GITHUB_OUTPUT
            else
              echo "bump_type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        id: version
        run: |
          BUMP_TYPE="${{ steps.version_type.outputs.bump_type }}"
          PRERELEASE_ID="${{ steps.version_type.outputs.prerelease_id }}"
          
          if [[ "$BUMP_TYPE" == *"pre"* ]]; then
            if [ -n "$PRERELEASE_ID" ]; then
              NEW_VERSION=$(cargo bump --dry-run $BUMP_TYPE --pre-id $PRERELEASE_ID | grep "new version" | cut -d' ' -f4)
              cargo bump $BUMP_TYPE --pre-id $PRERELEASE_ID
            else
              NEW_VERSION=$(cargo bump --dry-run $BUMP_TYPE | grep "new version" | cut -d' ' -f4)
              cargo bump $BUMP_TYPE
            fi
          else
            NEW_VERSION=$(cargo bump --dry-run $BUMP_TYPE | grep "new version" | cut -d' ' -f4)
            cargo bump $BUMP_TYPE
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract the latest version's changelog
            VERSION="${{ steps.version.outputs.version }}"
            sed -n "/^## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | sed '$d' > RELEASE_NOTES.md
          else
            echo "## What's Changed" > RELEASE_NOTES.md
            git log --pretty=format:"- %s" HEAD~10..HEAD >> RELEASE_NOTES.md
          fi
          
          # Set multiline output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add .
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git push origin main

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"rc"* ]]; then
            PRERELEASE="--prerelease"
          else
            PRERELEASE=""
          fi
          
          gh release create "v$VERSION" \
            --title "FluxEncrypt v$VERSION" \
            --notes-file RELEASE_NOTES.md \
            $PRERELEASE

  # Build binaries for multiple platforms
  build_binaries:
    name: Build Binaries
    needs: version_and_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: fluxencrypt-cli
            asset_name: fluxencrypt-linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: fluxencrypt-cli
            asset_name: fluxencrypt-linux-musl-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: fluxencrypt-cli
            asset_name: fluxencrypt-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: fluxencrypt-cli.exe
            asset_name: fluxencrypt-windows-amd64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: fluxencrypt-cli.exe
            asset_name: fluxencrypt-windows-arm64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: fluxencrypt-cli
            asset_name: fluxencrypt-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: fluxencrypt-cli
            asset_name: fluxencrypt-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.version_and_release.outputs.version }}"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Install cross for ARM builds
        if: contains(matrix.target, 'aarch64') && matrix.os == 'ubuntu-latest'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cross build --release --target ${{ matrix.target }} -p fluxencrypt-cli
          else
            cargo build --release --target ${{ matrix.target }} -p fluxencrypt-cli
          fi

      - name: Strip binary (Unix only)
        if: matrix.os != 'windows-latest'
        run: |
          if command -v strip > /dev/null; then
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi

      - name: Create release archive
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
            echo "ASSET_PATH=target/${{ matrix.target }}/release/${{ matrix.asset_name }}.zip" >> $GITHUB_ENV
          else
            tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
            echo "ASSET_PATH=target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "v${{ needs.version_and_release.outputs.version }}" "${{ env.ASSET_PATH }}"

      - name: Generate SBOM
        uses: anchore/sbom-action@v0.17.7
        with:
          path: ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          format: spdx-json
          output-file: "${{ matrix.asset_name }}.spdx.json"

      - name: Upload SBOM
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "v${{ needs.version_and_release.outputs.version }}" "${{ matrix.asset_name }}.spdx.json"

  # Publish to crates.io
  publish_crates:
    name: Publish to crates.io
    needs: [version_and_release, build_binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.version_and_release.outputs.version }}"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Publish fluxencrypt (core)
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cd fluxencrypt
          cargo publish --token $CARGO_REGISTRY_TOKEN

      - name: Wait for crates.io to update
        run: sleep 60

      - name: Publish fluxencrypt-async
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cd fluxencrypt-async
          cargo publish --token $CARGO_REGISTRY_TOKEN

      - name: Wait for crates.io to update
        run: sleep 60

      - name: Publish fluxencrypt-cli
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cd fluxencrypt-cli
          cargo publish --token $CARGO_REGISTRY_TOKEN

  # Build and publish Docker images
  docker_build:
    name: Build and Push Docker Images
    needs: [version_and_release, build_binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.version_and_release.outputs.version }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            threatflux/fluxencrypt
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=v${{ needs.version_and_release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.version_and_release.outputs.version }}
            type=semver,pattern={{major}},value=v${{ needs.version_and_release.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.version_and_release.outputs.version }}

      - name: Generate SBOM for Docker image
        uses: anchore/sbom-action@v0.17.7
        with:
          image: threatflux/fluxencrypt:${{ needs.version_and_release.outputs.version }}
          format: spdx-json
          output-file: "fluxencrypt-docker.spdx.json"

      - name: Upload Docker SBOM
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "v${{ needs.version_and_release.outputs.version }}" "fluxencrypt-docker.spdx.json"

  # Security scanning
  security_scan:
    name: Security Scan
    needs: [version_and_release, docker_build]
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'threatflux/fluxencrypt:${{ needs.version_and_release.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload security scan results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "v${{ needs.version_and_release.outputs.version }}" "trivy-results.sarif"

  # Update documentation
  update_docs:
    name: Update Documentation
    needs: [version_and_release, publish_crates]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.version_and_release.outputs.version }}"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Generate documentation
        run: |
          cargo doc --all-features --workspace --no-deps

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: docs/v${{ needs.version_and_release.outputs.version }}

  # Final notifications
  notify:
    name: Notify Release Complete
    needs: [version_and_release, build_binaries, publish_crates, docker_build, security_scan, update_docs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify success
        if: needs.version_and_release.result == 'success' && needs.build_binaries.result == 'success' && needs.publish_crates.result == 'success'
        run: |
          echo "🎉 FluxEncrypt v${{ needs.version_and_release.outputs.version }} has been successfully released!"
          echo "📦 Crates published to crates.io"
          echo "🐳 Docker images pushed to Docker Hub"
          echo "📋 Release artifacts uploaded to GitHub"
          echo "🔒 Security scan completed"
          echo "📚 Documentation updated"

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Release process failed for FluxEncrypt v${{ needs.version_and_release.outputs.version }}"
          echo "Please check the workflow logs for details."
searchState.loadedDescShard("fluxencrypt", 0, "FluxEncrypt\nMain FluxEncrypt cryptographic engine providing unified …\nBuilder for configuring and creating Cryptum instances\nCurrent version of the FluxEncrypt library\nGet batch processor for multiple file operations\nBuild the Cryptum instance\nCreate a Cryptum instance with a configuration builder\nSet the cipher suite\nConfiguration options and builders for FluxEncrypt …\nGet the current configuration\nConvenience function to create a Cryptum instance with …\nDecrypt data using hybrid encryption\nDecrypt a file using streaming decryption\nDecrypt a file with progress callback\nEncrypt data using hybrid encryption\nEncrypt a file using streaming encryption\nEncrypt a file with progress callback\nCore encryption and decryption functionality.\nEnvironment-based secret management functionality.\nError types and handling for FluxEncrypt operations.\nAccess the file cipher for advanced operations\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new RSA key pair\nEnable or disable hardware acceleration\nAccess the hybrid cipher for advanced operations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey generation, parsing, and management functionality.\nSet the memory limit\nCreate a new Cryptum instance with custom configuration\nCreate a new Cryptum builder\nSet the RSA key size\nEnable or disable secure memory\nStreaming encryption and decryption functionality.\nSet the stream chunk size\nAccess the stream cipher for advanced operations\nCreate a new Cryptum instance with default configuration\nAES-128-GCM\nAES-256-GCM (recommended)\nArgon2id (future implementation)\nSupported cipher suites for symmetric encryption\nCompression algorithms\nConfiguration for FluxEncrypt operations\nBuilder for creating Config instances\nKey derivation algorithms and parameters\nLZ4 compression (future implementation)\nNo compression\nPBKDF2 with SHA-256\n2048-bit keys (minimum recommended)\n3072-bit keys\n4096-bit keys (maximum security)\nRSA key size options\nZlib compression (future implementation)\nBuild the configuration, validating it first\nCreate a new ConfigBuilder\nSet the cipher suite\nCipher suite for symmetric encryption\nSet the compression algorithm\nCompression algorithm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnable or disable hardware acceleration\nEnable hardware acceleration if available\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the key derivation algorithm\nKey derivation algorithm and parameters\nGet the key length in bytes for the configured cipher suite\nSet the memory limit in MB\nMemory limit for operations in MB\nGet the nonce/IV length in bytes for the configured cipher …\nSet the RSA key size\nRSA key size for asymmetric operations\nEnable or disable secure memory wiping\nEnable secure memory wiping\nSet the stream chunk size\nMaximum chunk size for streaming operations\nGet the authentication tag length in bytes\nValidate the configuration\nNumber of iterations (recommended: 100,000+)\nMemory cost in KB\nParallelism degree\nSalt length in bytes (recommended: 32)\nTime cost (iterations)\nAES-GCM symmetric encryption implementation.\nHybrid encryption implementation combining RSA-OAEP and …\nRSA-OAEP asymmetric encryption implementation.\nAES-GCM cipher for symmetric encryption/decryption …\nA secure AES key that is automatically zeroized when …\nGet the key bytes\nDecrypt data with AES-GCM\nEncrypt data with AES-GCM\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new random AES key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the key length for the configured cipher suite\nCreate a new AES-GCM cipher\nCreate a new AES key from raw bytes\nGet the nonce length (always 12 bytes for GCM)\nGet the authentication tag length (always 16 bytes for GCM)\nA hybrid cipher that combines RSA-OAEP and AES-GCM …\nGet the configuration used by this cipher.\nDecrypt data using hybrid decryption.\nEncrypt data using hybrid encryption.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new HybridCipher with the given configuration.\nRSA-OAEP cipher for asymmetric encryption operations\nGet the ciphertext length for a given RSA key\nDecrypt data with RSA-OAEP\nEncrypt data with RSA-OAEP\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculate the maximum plaintext length for RSA-OAEP …\nCreate a new RSA-OAEP cipher\nEnvironment secret provider implementation.\nSecret handling and format detection for environment …\nEnvironment secret provider for loading keys from …\nBuilder for creating environment secret providers with …\nBuild the provider\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad multiple secrets at once\nGet an optional secret (returns None if not found)\nGet an optional string (returns None if not found)\nGet a private key from an environment variable\nGet a public key from an environment variable\nGet a secret from an environment variable with automatic …\nGet a secret with a specific format\nGet a secret string from an environment variable\nCheck if an environment variable exists\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all environment variables that match the prefix\nCreate a new environment secret provider\nCreate a new builder\nSet the environment variable prefix\nEnable strict mode (all requested secrets must exist)\nEnable strict mode\nCreate a new environment secret provider with a variable …\nBase64 encoded value\nA secret loaded from an environment variable\nFile path pointing to the secret\nHexadecimal encoded value\nPEM format (with headers)\nRaw string value\nSupported secret formats in environment variables\nGet the secret data as bytes\nConvert the secret to a private key\nConvert the secret to a public key\nConvert the secret to a string (if it contains valid UTF-8)\nDetect the format of a secret string\nGet the secret format\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a secret from a string with automatic format …\nCreate a secret from a string with a specified format\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the secret is empty\nGet the length of the secret data\nUtility function to load a secret from an environment …\nUtility function to load a secret with a specific format\nCreate a new secret from raw data\nGet the original string value (for debugging)\nConvert the secret to base64\nConvert the secret to hex\nBase64 decoding error\nConfiguration error\nCryptographic operation failed\nEnvironment variable error\nContains the error value\nMain error type for FluxEncrypt operations.\nInvalid input data\nI/O operation failed\nKey-related error\nMemory allocation error\nContains the success value\nOther/generic error\nResult type alias for FluxEncrypt operations.\nRing cryptographic library error\nSerialization/deserialization error\nStream processing error\nCreate a new configuration error\nCreate a new crypto error\nCreate a new environment error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new invalid input error\nCreate a new key error\nCreate a new memory error\nCreate an other error from an anyhow error\nCreate a new stream error\nError message describing the failure\nError message describing the key issue\nError message describing the invalid input\nError message describing the configuration issue\nError message describing the environment issue\nError message from ring\nError message describing the stream issue\nError message describing the memory issue\nThe underlying I/O error\nThe underlying serialization error\nThe underlying base64 error\nThe underlying error\nRSA key pair generation functionality.\nRSA key pair functionality.\nKey parsing functionality for various formats.\nRSA private key functionality.\nRSA public key functionality.\nSecure key storage functionality.\nAn RSA key pair containing both public and private keys\nReturns the argument unchanged.\nCreate a key pair from separate public and private keys\nGenerate a new RSA key pair\nCalls <code>U::from(self)</code>.\nConsume the key pair and return the individual keys\nGet the private key\nGet the public key\nDER format (Binary ASN.1)\nKey format enumeration\nKey parser for various formats\nPEM format (Base64 encoded with headers)\nPKCS#8 format\nSSH public key format\nAuto-detect the key format from data\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new key parser\nConvenience function to parse an encrypted private key …\nParse a private key from bytes\nConvenience function to parse a private key from a PEM …\nParse a public key from bytes\nConvenience function to parse a public key from a PEM …\nAn RSA private key that is automatically zeroized when …\nGet the CRT coefficient as bytes\nReturns the argument unchanged.\nGet a reference to the inner RSA private key\nCalls <code>U::from(self)</code>.\nGet the key size in bits\nGet the key size in bytes\nGet the modulus as bytes\nCreate a new private key from an RSA private key\nGet the first prime factor as bytes\nGet the second prime factor as bytes\nGet the private exponent as bytes\nGet the corresponding public key\nExport the private key as DER format (PKCS1 format)\nExport the private key as encrypted PEM format (PKCS#8 …\nExport the private key as PEM format (PKCS1 format with …\nAn RSA public key\nReturns the argument unchanged.\nGet a reference to the inner RSA public key\nCalls <code>U::from(self)</code>.\nGet the key size in bits\nGet the key size in bytes\nGet the modulus as bytes\nCreate a new public key from an RSA public key\nGet the public exponent as bytes\nExport the public key as DER format (PKCS1 format)\nExport the public key as PEM format (PKCS1 format with RSA …\nKey storage manager for secure file operations\nOptions for key storage operations\nFile permissions mode (Unix only)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a key pair from separate files\nConvenience function to load a key pair from the default …\nLoad a private key from file\nLoad a public key from file\nCreate a new key storage manager\nWhether to overwrite existing files\nPassword for encrypting private keys\nSave a key pair to separate files\nConvenience function to save a key pair to the default …\nSave a private key to file\nSave a public key to file\nCreate a new key storage manager with encryption enabled\nBatch processing functionality for multiple files and …\nStreaming cipher implementation for large data processing.\nConfiguration for batch operations\nBatch processor for multiple file operations\nResult of a batch operation\nWhether to continue processing on error\nDecrypt multiple files in batch\nProcessing duration\nEncrypt multiple files in batch\nFiles that failed to process\nFind files in a directory matching a pattern\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of parallel operations\nCreate a new batch processor\nFile name pattern for output files\nWhether to preserve directory structure\nTotal number of files processed successfully\nCreate a batch processor without parallel processing\nTotal number of bytes processed\nA file-based streaming cipher for encrypting/decrypting …\nProgress callback for streaming operations\nA streaming cipher for processing large amounts of data\nGet the chunk size used for streaming\nGet the configuration\nDecrypt a file\nDecrypt a stream of data\nEncrypt a file\nEncrypt a stream of data\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new streaming cipher\nCreate a new file stream cipher\nGet the underlying stream cipher")
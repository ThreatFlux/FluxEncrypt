searchState.loadedDescShard("fluxencrypt_async", 0, "FluxEncrypt Async\nConfiguration for FluxEncrypt operations\nCurrent version of the FluxEncrypt Async library\nCreate a new ConfigBuilder\nCipher suite for symmetric encryption\nCompression algorithm\nReturns the argument unchanged.\nFuture-based utilities and async helpers.\nEnable hardware acceleration if available\nCalls <code>U::from(self)</code>.\nKey derivation algorithm and parameters\nGet the key length in bytes for the configured cipher suite\nMemory limit for operations in MB\nGet the nonce/IV length in bytes for the configured cipher …\nRSA key size for asymmetric operations\nEnable secure memory wiping\nMaximum chunk size for streaming operations\nGet the authentication tag length in bytes\nTokio-based async implementations for FluxEncrypt …\nValidate the configuration\nA utility for batching async operations\nA progress tracker for async operations\nA future that wraps a CPU-intensive decryption operation\nA future that wraps a CPU-intensive encryption operation\nMark as completed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new async batch processor\nCreate a new progress tracker\nCreate a new encryption future\nCreate a new decryption future\nGet current progress percentage\nProcess items in batches with a given async function\nRetry an async operation with exponential backoff\nRun a blocking operation on a thread pool and return a …\nUpdate progress and call callback if set\nSet a progress callback\nCreate a timeout future for async operations\nCreate a future that yields control to allow other tasks …\nAsync file stream cipher for processing large files\nAsync version of the HybridCipher for non-blocking …\nProgress callback for async operations\nGet the underlying async cipher\nDecrypt data asynchronously\nDecrypt a file asynchronously\nProcess multiple decryption operations concurrently\nDecrypt data from an async reader and write to an async …\nEncrypt data asynchronously\nEncrypt a file asynchronously\nProcess multiple encryption operations concurrently\nEncrypt data from an async reader and write to an async …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the underlying sync cipher\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new async hybrid cipher\nCreate a new async file stream cipher")
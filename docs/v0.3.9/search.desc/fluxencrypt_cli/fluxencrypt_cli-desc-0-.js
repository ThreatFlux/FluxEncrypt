searchState.loadedDescShard("fluxencrypt_cli", 0, "FluxEncrypt CLI - Command line interface for the …\nDecrypt multiple files in batch\nEncrypt multiple files in batch\nBenchmark encryption/decryption performance\nFluxEncrypt CLI - Secure encryption for files and data\nManage configuration\nDecrypt a file or data\nEncrypt a file or data\nShow information about keys or encrypted files\nGenerate a new RSA key pair\nStream decrypt large files\nStream encrypt large files\nVerify encrypted file integrity\nCommand implementations for the FluxEncrypt CLI.\nConfiguration file path\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize logging based on verbosity settings\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrint the application banner\nQuiet mode (suppress output)\nUtility functions for CLI operations.\nEnable verbose logging\nCommon result type for all commands\nContains the error value\nContains the success value\nBatch command implementations.\nBenchmark command implementation with modular, secure, and …\nConfig command implementation.\nDecrypt command implementation.\nEncrypt command implementation.\nInfo command implementation.\nKey generation command implementation.\nStream command implementations.\nVerify command implementation.\nContinue processing on error\nContinue processing on error\nCreate batch processor and configuration from command …\nCreate batch processor and configuration from decrypt …\nDisplay completion message if operation was successful\nDisplay failed files if any failures occurred\nDisplay summary statistics for batch operation\nDisplay throughput information if data was processed\nFind files in a directory using batch processor\nFind files using glob pattern\nDon’t preserve directory structure in output\nDon’t preserve directory structure in output\nReturns the argument unchanged.\nReturns the argument unchanged.\nInput directory or glob pattern for files to encrypt\nInput directory or glob pattern for files to decrypt\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key file path\nPrivate key file path\nCheck if file matches the given pattern\nMaximum number of parallel operations\nMaximum number of parallel operations\nOutput directory for encrypted files\nOutput directory for decrypted files\nOutput file pattern (use {name} for original filename)\nOutput file pattern (use {name} for original filename)\nFile pattern to match (e.g., “<em>.txt”, “</em>.json”)\nFile pattern to match (e.g., “*.enc”)\nPrepare input files for decryption with validation\nPrepare input files with validation and early return for …\nProcess directories recursively\nProcess directories recursively\nSetup progress bar and callback for file processing\nSecure temporary file management\nTest streaming vs hybrid mode\nCreates a secure temporary directory with proper …\nOnly run decryption benchmarks\nOnly run encryption benchmarks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of iterations for each test\nKey sizes to test\nData sizes to test (in KB)\nShow detailed statistics\nGet a configuration value\nInitialize configuration file\nReset configuration to defaults\nSet a configuration value\nShow current configuration\nWhether to continue on error in batch operations\nDefault chunk size for streaming operations\nDefault output directory for batch operations\nDefault file pattern for batch operations\nDefault private key path\nDefault public key path\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to preserve directory structure\nWhether to use parallel processing by default\nWhether to show verbose output by default\nConfiguration key to set\nConfiguration key to get\nConfiguration value\nDecrypt a file or data\nData to decrypt directly (base64 encoded, alternative to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInput file to decrypt (or use stdin if not provided)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrivate key file path (or use FLUXENCRYPT_PRIVATE_KEY env …\nOutput file for decrypted data (optional - defaults to …\nPassword for encrypted private keys\nInput is raw binary instead of base64 encoded (only …\nEncrypt a file or data\nInput source variants for encryption\nCreate a cryptum instance\nCreate a progress bar with standard styling\nData to encrypt directly (alternative to input file or …\nDetermine the input source based on command arguments\nEncrypt data using the cryptum instance\nEncrypt large files with appropriate method based on …\nEncrypt large files for base64 output (read all at once)\nEncrypt large files using streaming for raw binary output\nEncrypt small files using hybrid encryption\nRead data from environment file (.env format)\nFormat output type description\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet file size for determining encryption strategy\nHandle direct data encryption\nHandle environment file encryption\nHandle file-based encryption\nHandle stdin encryption\nInput file to encrypt (or use stdin if not provided)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key file path (or use FLUXENCRYPT_PUBLIC_KEY env …\nLoad the public key from the specified path or environment\nOutput file for encrypted data (required for file input, …\nPrint encoded data to stdout\nPrint success message for file output\nOutput raw binary instead of base64 encoded (only applies …\nRead data from stdin\nRequire output file for file encryption\nDetermine if small file encryption should be used\nValidate command arguments to ensure no conflicting options\nValidate that the input file exists\nWrite encrypted data to a file\nWrite output file in the appropriate format\nFile to analyze (key file or encrypted file)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShow raw key data (use with caution!)\nShow detailed information\nGenerate a new RSA key pair\nOutput keys in base64 format\nCheck if files exist and confirm overwrite if needed\nConfirm final generation\nDisplay encryption status message\nDisplay the public key if requested\nDisplay success messages and results\nDisplay generation summary\nOverwrite existing key files without prompting\nReturns the argument unchanged.\nGenerate the RSA key pair\nGet final parameters based on interactive mode or defaults\nInteractive mode for guided key generation\nCalls <code>U::from(self)</code>.\nRSA key size in bits\nBase name for key files (without extension)\nOutput directory for the key files\nParse key size argument\nPassword to encrypt the private key\nPrompt for key name\nPrompt for key size selection\nPrompt for password protection\nRun interactive key generation with prompts\nSave keys in either base64 or PEM format\nSave keys in base64 format\nSave keys in PEM format\nSetup file paths and create output directory\nShow the generated public key\nChunk size in bytes (default: 1MB)\nChunk size in bytes (default: 1MB)\nCreate progress bar for stream decryption\nCreate file stream cipher with default config\nCreate progress bar for stream encryption\nCreate progress callback for streaming operations\nFinalize stream operation with results display\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet file size for stream processing\nInput file to encrypt\nInput file to decrypt\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key file path\nPrivate key file path\nLoad private key for stream decryption\nLoad public key for stream encryption\nOutput file for encrypted data\nOutput file for decrypted data\nPerform stream decryption operation\nPerform stream encryption operation\nPrint verbose information if enabled for decryption\nPrint verbose information if enabled for encryption\nValidate that the stream input file exists\nShow detailed progress information\nShow detailed progress information\nEncrypted file to verify\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrivate key file path (required for decryption …\nCheck only file structure without decryption\nShow detailed verification information\nConfirm overwriting an existing file\nCreate output directory if it doesn’t exist\nLoad a private key from file path or environment variable\nLoad a public key from file path or environment variable")